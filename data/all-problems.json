{
  "categories": [
    {
      "id": "array",
      "name": "Array",
      "problems": [
        {
          "id": 1,
          "title": "Two Sum",
          "difficulty": "Easy",
          "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.",
          "examples": [
            {
              "input": "nums = [2,7,11,15], target = 9",
              "output": "[0,1]",
              "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
            },
            {
              "input": "nums = [3,2,4], target = 6",
              "output": "[1,2]",
              "explanation": "Because nums[1] + nums[2] == 6, we return [1, 2]."
            },
            {
              "input": "nums = [3,3], target = 6",
              "output": "[0,1]",
              "explanation": "Because nums[0] + nums[1] == 6, we return [0, 1]."
            }
          ],
          "constraints": [
            "2 <= nums.length <= 10^4",
            "-10^9 <= nums[i] <= 10^9",
            "-10^9 <= target <= 10^9",
            "Only one valid answer exists."
          ],
          "testCases": [
            { "input": [[2,7,11,15], 9], "output": [0,1] },
            { "input": [[3,2,4], 6], "output": [1,2] },
            { "input": [[3,3], 6], "output": [0,1] },
            { "input": [[1,2,3,4,5], 8], "output": [2,4] },
            { "input": [[0,4,3,0], 0], "output": [0,3] }
          ],
          "javaTemplate": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Your code here\n        return new int[0];\n    }\n}",
          "pythonTemplate": "def twoSum(nums, target):\n    # Your code here\n    return []",
          "cppTemplate": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        // Your code here\n        return {};\n    }\n};"
        },
        {
          "id": 2,
          "title": "Remove Duplicates from Sorted Array",
          "difficulty": "Easy",
          "description": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\n\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result.\n\nReturn k after placing the final result in the first k slots of nums.",
          "examples": [
            {
              "input": "nums = [1,1,2]",
              "output": "2, nums = [1,2,_]",
              "explanation": "Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively."
            },
            {
              "input": "nums = [0,0,1,1,1,2,2,3,3,4]",
              "output": "5, nums = [0,1,2,3,4,_,_,_,_,_]",
              "explanation": "Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively."
            }
          ],
          "constraints": [
            "0 <= nums.length <= 3 * 10^4",
            "-10^4 <= nums[i] <= 10^4",
            "nums is sorted in non-decreasing order."
          ],
          "testCases": [
            { "input": [[1,1,2]], "output": 2 },
            { "input": [[0,0,1,1,1,2,2,3,3,4]], "output": 5 },
            { "input": [[1,2,3,4,5]], "output": 5 },
            { "input": [[1,1,1,1,1]], "output": 1 },
            { "input": [[]], "output": 0 }
          ],
          "javaTemplate": "class Solution {\n    public int removeDuplicates(int[] nums) {\n        // Your code here\n        return 0;\n    }\n}",
          "pythonTemplate": "def removeDuplicates(nums):\n    # Your code here\n    return 0",
          "cppTemplate": "class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        // Your code here\n        return 0;\n    }\n};"
        },
        {
          "id": 3,
          "title": "Best Time to Buy and Sell Stock II",
          "difficulty": "Medium",
          "description": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\n\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\n\nFind and return the maximum profit you can achieve.",
          "examples": [
            {
              "input": "prices = [7,1,5,3,6,4]",
              "output": "7",
              "explanation": "Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7."
            },
            {
              "input": "prices = [1,2,3,4,5]",
              "output": "4",
              "explanation": "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit is 4."
            }
          ],
          "constraints": [
            "1 <= prices.length <= 3 * 10^4",
            "0 <= prices[i] <= 10^4"
          ],
          "testCases": [
            { "input": [[7,1,5,3,6,4]], "output": 7 },
            { "input": [[1,2,3,4,5]], "output": 4 },
            { "input": [[7,6,4,3,1]], "output": 0 },
            { "input": [[1,2]], "output": 1 },
            { "input": [[2,1,2,0,1]], "output": 2 }
          ],
          "javaTemplate": "class Solution {\n    public int maxProfit(int[] prices) {\n        // Your code here\n        return 0;\n    }\n}",
          "pythonTemplate": "def maxProfit(prices):\n    # Your code here\n    return 0",
          "cppTemplate": "class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        // Your code here\n        return 0;\n    }\n};"
        }
      ]
    },
    {
      "id": "strings",
      "name": "Strings",
      "problems": [
        {
          "id": 4,
          "title": "Valid Anagram",
          "difficulty": "Easy",
          "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
          "examples": [
            {
              "input": "s = \"anagram\", t = \"nagaram\"",
              "output": "true",
              "explanation": "Both strings contain the same characters with the same frequency."
            },
            {
              "input": "s = \"rat\", t = \"car\"",
              "output": "false",
              "explanation": "The strings have different characters."
            }
          ],
          "constraints": [
            "1 <= s.length, t.length <= 5 * 10^4",
            "s and t consist of lowercase English letters only."
          ],
          "testCases": [
            { "input": ["anagram", "nagaram"], "output": true },
            { "input": ["rat", "car"], "output": false },
            { "input": ["listen", "silent"], "output": true },
            { "input": ["a", "a"], "output": true },
            { "input": ["a", "ab"], "output": false }
          ],
          "javaTemplate": "class Solution {\n    public boolean isAnagram(String s, String t) {\n        // Your code here\n        return false;\n    }\n}",
          "pythonTemplate": "def isAnagram(s, t):\n    # Your code here\n    return False",
          "cppTemplate": "class Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        // Your code here\n        return false;\n    }\n};"
        },
        {
          "id": 5,
          "title": "Valid Palindrome",
          "difficulty": "Easy",
          "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n\nGiven a string s, return true if it is a palindrome, or false otherwise.",
          "examples": [
            {
              "input": "s = \"A man, a plan, a canal: Panama\"",
              "output": "true",
              "explanation": "\"amanaplanacanalpanama\" is a palindrome."
            },
            {
              "input": "s = \"race a car\"",
              "output": "false",
              "explanation": "\"raceacar\" is not a palindrome."
            }
          ],
          "constraints": [
            "1 <= s.length <= 2 * 10^5",
            "s consists only of printable ASCII characters."
          ],
          "testCases": [
            { "input": ["A man, a plan, a canal: Panama"], "output": true },
            { "input": ["race a car"], "output": false },
            { "input": [" "], "output": true },
            { "input": ["a"], "output": true },
            { "input": ["ab"], "output": false }
          ],
          "javaTemplate": "class Solution {\n    public boolean isPalindrome(String s) {\n        // Your code here\n        return false;\n    }\n}",
          "pythonTemplate": "def isPalindrome(s):\n    # Your code here\n    return False",
          "cppTemplate": "class Solution {\npublic:\n    bool isPalindrome(string s) {\n        // Your code here\n        return false;\n    }\n};"
        }
      ]
    },
    {
      "id": "linked-list",
      "name": "Linked List",
      "problems": [
        {
          "id": 6,
          "title": "Reverse Linked List",
          "difficulty": "Easy",
          "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
          "examples": [
            {
              "input": "head = [1,2,3,4,5]",
              "output": "[5,4,3,2,1]",
              "explanation": "The linked list is reversed."
            },
            {
              "input": "head = [1,2]",
              "output": "[2,1]",
              "explanation": "The linked list is reversed."
            }
          ],
          "constraints": [
            "The number of nodes in the list is the range [0, 5000].",
            "-5000 <= Node.val <= 5000"
          ],
          "testCases": [
            { "input": [[1,2,3,4,5]], "output": [5,4,3,2,1] },
            { "input": [[1,2]], "output": [2,1] },
            { "input": [[]], "output": [] },
            { "input": [[1]], "output": [1] }
          ],
          "javaTemplate": "class Solution {\n    public ListNode reverseList(ListNode head) {\n        // Your code here\n        return null;\n    }\n}",
          "pythonTemplate": "def reverseList(head):\n    # Your code here\n    return None",
          "cppTemplate": "class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        // Your code here\n        return nullptr;\n    }\n};"
        }
      ]
    },
    {
      "id": "trees",
      "name": "Trees",
      "problems": [
        {
          "id": 7,
          "title": "Maximum Depth of Binary Tree",
          "difficulty": "Easy",
          "description": "Given the root of a binary tree, return its maximum depth.\n\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
          "examples": [
            {
              "input": "root = [3,9,20,null,null,15,7]",
              "output": "3",
              "explanation": "The binary tree has a maximum depth of 3."
            },
            {
              "input": "root = [1,null,2]",
              "output": "2",
              "explanation": "The binary tree has a maximum depth of 2."
            }
          ],
          "constraints": [
            "The number of nodes in the tree is in the range [0, 10^4].",
            "-100 <= Node.val <= 100"
          ],
          "testCases": [
            { "input": [[3,9,20,null,null,15,7]], "output": 3 },
            { "input": [[1,null,2]], "output": 2 },
            { "input": [[]], "output": 0 },
            { "input": [[1]], "output": 1 }
          ],
          "javaTemplate": "class Solution {\n    public int maxDepth(TreeNode root) {\n        // Your code here\n        return 0;\n    }\n}",
          "pythonTemplate": "def maxDepth(root):\n    # Your code here\n    return 0",
          "cppTemplate": "class Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        // Your code here\n        return 0;\n    }\n};"
        }
      ]
    },
    {
      "id": "sorting-searching",
      "name": "Sorting and Searching",
      "problems": [
        {
          "id": 8,
          "title": "Merge Sorted Array",
          "difficulty": "Easy",
          "description": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\n\nMerge nums2 into nums1 as one sorted array.\n\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.",
          "examples": [
            {
              "input": "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
              "output": "[1,2,2,3,5,6]",
              "explanation": "The arrays are merged into [1,2,2,3,5,6]."
            },
            {
              "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
              "output": "[1]",
              "explanation": "Only nums1 has elements."
            }
          ],
          "constraints": [
            "nums1.length == m + n",
            "nums2.length == n",
            "0 <= m, n <= 200",
            "1 <= m + n <= 200",
            "-10^9 <= nums1[i], nums2[j] <= 10^9"
          ],
          "testCases": [
            { "input": [[1,2,3,0,0,0], 3, [2,5,6], 3], "output": [1,2,2,3,5,6] },
            { "input": [[1], 1, [], 0], "output": [1] },
            { "input": [[0], 0, [1], 1], "output": [1] }
          ],
          "javaTemplate": "class Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        // Your code here\n    }\n}",
          "pythonTemplate": "def merge(nums1, m, nums2, n):\n    # Your code here\n    pass",
          "cppTemplate": "class Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        // Your code here\n    }\n};"
        }
      ]
    },
    {
      "id": "dynamic-programming",
      "name": "Dynamic Programming",
      "problems": [
        {
          "id": 9,
          "title": "Climbing Stairs",
          "difficulty": "Easy",
          "description": "You are climbing a staircase. It takes n steps to reach the top.\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
          "examples": [
            {
              "input": "n = 2",
              "output": "2",
              "explanation": "There are two ways to climb to the top: 1. 1 step + 1 step, 2. 2 steps"
            },
            {
              "input": "n = 3",
              "output": "3",
              "explanation": "There are three ways to climb to the top: 1. 1 step + 1 step + 1 step, 2. 1 step + 2 steps, 3. 2 steps + 1 step"
            }
          ],
          "constraints": [
            "1 <= n <= 45"
          ],
          "testCases": [
            { "input": [2], "output": 2 },
            { "input": [3], "output": 3 },
            { "input": [1], "output": 1 },
            { "input": [4], "output": 5 },
            { "input": [5], "output": 8 }
          ],
          "javaTemplate": "class Solution {\n    public int climbStairs(int n) {\n        // Your code here\n        return 0;\n    }\n}",
          "pythonTemplate": "def climbStairs(n):\n    # Your code here\n    return 0",
          "cppTemplate": "class Solution {\npublic:\n    int climbStairs(int n) {\n        // Your code here\n        return 0;\n    }\n};"
        }
      ]
    },
    {
      "id": "design",
      "name": "Design",
      "problems": [
        {
          "id": 10,
          "title": "Min Stack",
          "difficulty": "Medium",
          "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n\nImplement the MinStack class:\n- MinStack() initializes the stack object.\n- void push(int val) pushes the element val onto the stack.\n- void pop() removes the element on the top of the stack.\n- int top() gets the top element of the stack.\n- int getMin() retrieves the minimum element in the stack.\n\nYou must implement a solution with O(1) time complexity for each function.",
          "examples": [
            {
              "input": "[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]",
              "output": "[null,null,null,null,-3,null,0,-2]",
              "explanation": "MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2"
            }
          ],
          "constraints": [
            "-2^31 <= val <= 2^31 - 1",
            "Methods pop, top and getMin operations will always be called on non-empty stacks.",
            "At most 3 * 10^4 calls will be made to push, pop, top, and getMin."
          ],
          "testCases": [
            { "input": [["MinStack","push","push","push","getMin","pop","top","getMin"], [[],[-2],[0],[-3],[],[],[],[]]], "output": [null,null,null,null,-3,null,0,-2] }
          ],
          "javaTemplate": "class MinStack {\n    public MinStack() {\n        // Your code here\n    }\n    \n    public void push(int val) {\n        // Your code here\n    }\n    \n    public void pop() {\n        // Your code here\n    }\n    \n    public int top() {\n        // Your code here\n        return 0;\n    }\n    \n    public int getMin() {\n        // Your code here\n        return 0;\n    }\n}",
          "pythonTemplate": "class MinStack:\n    def __init__(self):\n        # Your code here\n        pass\n    \n    def push(self, val):\n        # Your code here\n        pass\n    \n    def pop(self):\n        # Your code here\n        pass\n    \n    def top(self):\n        # Your code here\n        return 0\n    \n    def getMin(self):\n        # Your code here\n        return 0",
          "cppTemplate": "class MinStack {\npublic:\n    MinStack() {\n        // Your code here\n    }\n    \n    void push(int val) {\n        // Your code here\n    }\n    \n    void pop() {\n        // Your code here\n    }\n    \n    int top() {\n        // Your code here\n        return 0;\n    }\n    \n    int getMin() {\n        // Your code here\n        return 0;\n    }\n};"
        }
      ]
    },
    {
      "id": "math",
      "name": "Math",
      "problems": [
        {
          "id": 11,
          "title": "Fizz Buzz",
          "difficulty": "Easy",
          "description": "Given an integer n, return a string array answer (1-indexed) where:\n- answer[i] == \"FizzBuzz\" if i is divisible by 3 and 5.\n- answer[i] == \"Fizz\" if i is divisible by 3.\n- answer[i] == \"Buzz\" if i is divisible by 5.\n- answer[i] == i (as a string) if none of the above conditions are true.",
          "examples": [
            {
              "input": "n = 3",
              "output": "[\"1\",\"2\",\"Fizz\"]",
              "explanation": "For n = 3, we return [\"1\", \"2\", \"Fizz\"]."
            },
            {
              "input": "n = 5",
              "output": "[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]",
              "explanation": "For n = 5, we return [\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\"]."
            }
          ],
          "constraints": [
            "1 <= n <= 10^4"
          ],
          "testCases": [
            { "input": [3], "output": ["1","2","Fizz"] },
            { "input": [5], "output": ["1","2","Fizz","4","Buzz"] },
            { "input": [15], "output": ["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz"] },
            { "input": [1], "output": ["1"] }
          ],
          "javaTemplate": "class Solution {\n    public List<String> fizzBuzz(int n) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}",
          "pythonTemplate": "def fizzBuzz(n):\n    # Your code here\n    return []",
          "cppTemplate": "class Solution {\npublic:\n    vector<string> fizzBuzz(int n) {\n        // Your code here\n        return {};\n    }\n};"
        }
      ]
    }
  ]
}
